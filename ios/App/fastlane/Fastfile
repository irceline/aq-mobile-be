default_platform(:ios)

platform :ios do
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  lane :configure do
    ensure_env_vars(
      env_vars: [
        'KEYCHAIN_PASSWORD',
        'MATCH_PASSWORD',
      ]
    )

    setup_ci

    match(
      type: "appstore",
      app_identifier: app_identifier,
      team_id: team_id,
      readonly: true,
    )
  end

  lane :build do
    configure

    sh("pod install --repo-update")

    build_app(
      scheme: "App",
      workspace: "App.xcworkspace",
      include_bitcode: false,
      export_method: "app-store",
      clean: true,
      output_name: "ets-mobile-capacitor.ipa",
    )
  end

  lane :app_store_connection do
    app_store_connect_api_key(
      key_id: ENV["APPLE_API_KEY_ID"],
      issuer_id: ENV["APPLE_API_KEY_ISSUER_ID"],
      key_content: ENV["APPLE_API_KEY_P8_BASE64"],
      duration: 1200,
      in_house: false,
      is_key_content_base64: true,
    )
  end

  lane :deploy_testflight do
    ensure_env_vars(
      env_vars: [
        'KEYCHAIN_PASSWORD',
        'MATCH_PASSWORD',
        'APPLE_API_KEY_ID',
        'APPLE_API_KEY_ISSUER_ID',
        'APPLE_API_KEY_P8_BASE64',
      ]
    )

    app_store_connection

    app_store_connect_api_key(
      key_id: ENV["APPLE_API_KEY_ID"],
      issuer_id: ENV["APPLE_API_KEY_ISSUER_ID"],
      key_content: ENV["APPLE_API_KEY_P8_BASE64"],
      duration: 1200,
      in_house: false,
      is_key_content_base64: true,
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
    )
  end

  lane :deploy do
    build
    deploy_testflight
  end
end
